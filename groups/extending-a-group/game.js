// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var map, preload, create, monsterGroup, g;
  map = require('prelude-ls').map;
  preload = function(){
    g.load.image('ufo', '../../../phaser/examples/assets/sprites/ufo.png');
    return g.load.image('baddie', '../../../phaser/examples/assets/sprites/space-baddie.png');
  };
  create = function(){
    var group, player;
    group = new monsterGroup(g);
    group.createSprites(g, 'ufo', 'bounce', 32);
    group.createSprites(g, 'baddie', 'slide', 43);
    console.log("# of living monsters:", group.countLiving());
    player = g.add.sprite(200, 200, 'ufo');
    player.scale.setTo(2, 2);
    return group.add(player);
  };
  monsterGroup = (function(superclass){
    var prototype = extend$((import$(monsterGroup, superclass).displayName = 'monsterGroup', monsterGroup), superclass).prototype, constructor = monsterGroup;
    prototype.createSprites = function(g, image, action, count){
      var i$, i, results$ = [];
      for (i$ = 0; i$ < count; ++i$) {
        i = i$;
        results$.push(this.createSprite.apply(this, arguments));
      }
      return results$;
    };
    prototype.createSprite = function(g, image, action){
      var sprite;
      sprite = this.create(g.world.randomX, g.world.randomY, image);
      sprite.name = "Peng's Minion!";
      if (action === 'bounce') {
        return g.add.tween(sprite).to({
          y: sprite.y - 100
        }, 2000, Phaser.Easing.Elastic.Out, true, 0, 1000, true);
      } else if (action === 'slide') {
        return g.add.tween(sprite).to({
          x: sprite.x + 200
        }, 4000, Phaser.Easing.Elastic.Out, true, 0, 1000, true);
      }
    };
    function monsterGroup(){
      monsterGroup.superclass.apply(this, arguments);
    }
    return monsterGroup;
  }(Phaser.Group));
  g = new Phaser.Game(800, 600, Phaser.AUTO, '', {
    preload: preload,
    create: create
  });
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
