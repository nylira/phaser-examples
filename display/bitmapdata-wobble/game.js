// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var map, assets, bmd, waveData, waveDataCounter, waveSize, wavePixelChunk, gPreload, gCreate, gUpdate, gRender, updateWobblyBall, g;
  map = require('prelude-ls').map;
  assets = '../../../phaser/examples/assets/';
  waveSize = 8;
  wavePixelChunk = 2;
  gPreload = function(){
    g.load.image('ball', assets + 'sprites/shinyball.png');
  };
  gCreate = function(){
    var i$, i;
    bmd = g.add.bitmapData(32, 64);
    for (i$ = 0; i$ < 100; ++i$) {
      i = i$;
      g.add.sprite(g.world.randomX, g.world.randomY, bmd);
    }
    waveData = g.math.sinCosGenerator(32, 8, 8, 2);
  };
  gUpdate = function(){
    bmd.clear();
    updateWobblyBall();
  };
  gRender = function(){};
  updateWobblyBall = function(){
    var s, copyRect, copyPoint, i$, step$, x;
    s = 0;
    copyRect = {
      x: 0,
      y: 0,
      w: wavePixelChunk,
      h: 32
    };
    copyPoint = {
      x: 0,
      y: 0
    };
    for (i$ = 0, step$ = wavePixelChunk; step$ < 0 ? i$ > 32 : i$ < 32; i$ += step$) {
      x = i$;
      copyPoint.x = x;
      copyPoint.y = waveSize + waveSize / 2 + waveData.sin[s];
      bmd.context.drawImage(g.cache.getImage('ball'), copyRect.x, copyRect.y, copyRect.w, copyRect.h, copyPoint.x, copyPoint.y, copyRect.w, copyRect.h);
      copyRect.x += wavePixelChunk;
      s++;
    }
    bmd.render();
    g.math.shift(waveData.sin);
    waveDataCounter++;
    if (waveDataCounter === waveData.length) {
      return waveDataCounter = 0;
    }
  };
  g = new Phaser.Game(800, 600, Phaser.AUTO, '', {
    preload: gPreload,
    create: gCreate,
    update: gUpdate,
    render: gRender
  });
}).call(this);
